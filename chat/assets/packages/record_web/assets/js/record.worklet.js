class RecorderProcessor extends AudioWorkletProcessor{static get parameterDescriptors(){return[{name:"numChannels",defaultValue:1,minValue:1,maxValue:16},{name:"sampleRate",defaultValue:48e3,minValue:8e3,maxValue:96e3}]}_bufferSize=4096;_bytesWritten=0;_buffers=[];_resampler=null;_numChannels=1;_sampleRate=48e3;constructor(t){super(t),this._numChannels=t.parameterData.numChannels,this._sampleRate=t.parameterData.sampleRate,this._resampler=new Resampler(sampleRate,this._sampleRate,1,this._bufferSize*this._numChannels),this.initBuffers()}initBuffers(){this._bytesWritten=0,this._buffers=[];for(let t=0;t<this._numChannels;t++)this._buffers[t]=[]}isBufferEmpty(){return 0===this._bytesWritten}isBufferFull(){return this._bytesWritten>=this._bufferSize}process(t){this.isBufferFull()&&this.flush();const e=t[0];if(0==e.length)return!0;for(let s=0;s<this._numChannels;s++)this._buffers[s].push([...e[s]]);return this._bytesWritten+=e[0].length,!0}flush(){let t=[];for(let r=0;r<this._numChannels;r++)t.push(this.mergeFloat32Arrays(this._buffers[r],this._bytesWritten));let e=this.interleave(t),s=this._resampler.resample(e);this.port.postMessage(this.floatTo16BitPCM(s)),this.initBuffers()}mergeFloat32Arrays(t,e){let s=new Float32Array(e);var r=0;for(let i=0;i<t.length;i++)s.set(t[i],r),r+=t[i].length;return s}interleave(t){if(1===t)return t[0];var e=0;for(let a=0;a<t.length;a++)e+=t[a].length;let s=new Float32Array(e);for(var r=0,i=0;r<e;){for(let e=0;e<t.length;e++)s[r]=t[e][i],r++;i++}return s}floatTo16BitPCM(t){let e=new DataView(new ArrayBuffer(2*t.length));for(let s=0;s<t.length;s++){let r=Math.max(-1,Math.min(1,t[s])),i=r<0?32768*r:32767*r;e.setInt16(2*s,i,!0)}return new Int16Array(e.buffer)}}class Resampler{constructor(t,e,s,r){if(!t||!e||!s)throw new Error("Invalid settings specified for the resampler.");this.resampler=null,this.fromSampleRate=t,this.toSampleRate=e,this.channels=s||0,this.inputBufferSize=r,this.initialize()}initialize(){this.fromSampleRate==this.toSampleRate?(this.resampler=t=>t,this.ratioWeight=1):(this.fromSampleRate<this.toSampleRate?(this.linearInterpolation(),this.lastWeight=1):(this.multiTap(),this.tailExists=!1,this.lastWeight=0),this.initializeBuffers(),this.ratioWeight=this.fromSampleRate/this.toSampleRate)}bufferSlice(t){try{return this.outputBuffer.subarray(0,t)}catch(e){try{return this.outputBuffer.length=t,this.outputBuffer}catch(e){return this.outputBuffer.slice(0,t)}}}initializeBuffers(){this.outputBufferSize=Math.ceil(this.inputBufferSize*this.toSampleRate/this.fromSampleRate/this.channels*1.0000004768371582)+this.channels+this.channels;try{this.outputBuffer=new Float32Array(this.outputBufferSize),this.lastOutput=new Float32Array(this.channels)}catch(t){this.outputBuffer=[],this.lastOutput=[]}}linearInterpolation(){this.resampler=t=>{let e,s,r,i,a,h,l,f,n,u=t.length,o=this.channels;if(u%o!=0)throw new Error("Buffer was of incorrect sample length.");if(u<=0)return[];for(e=this.outputBufferSize,s=this.ratioWeight,r=this.lastWeight,i=0,a=0,h=0,l=0,f=this.outputBuffer;r<1;r+=s)for(a=r%1,i=1-a,this.lastWeight=r%1,n=0;n<this.channels;++n)f[l++]=this.lastOutput[n]*i+t[n]*a;for(r-=1,u-=o,h=Math.floor(r)*o;l<e&&h<u;){for(a=r%1,i=1-a,n=0;n<this.channels;++n)f[l++]=t[h+(n>0?n:0)]*i+t[h+(o+n)]*a;r+=s,h=Math.floor(r)*o}for(n=0;n<o;++n)this.lastOutput[n]=t[h++];return this.bufferSlice(l)}}multiTap(){this.resampler=t=>{let e,s,r,i,a,h,l,f,n,u,o,p=t.length,m=this.channels;if(p%m!=0)throw new Error("Buffer was of incorrect sample length.");if(p<=0)return[];for(e=this.outputBufferSize,s=[],r=this.ratioWeight,i=0,h=0,l=0,f=!this.tailExists,this.tailExists=!1,n=this.outputBuffer,u=0,o=0,a=0;a<m;++a)s[a]=0;do{if(f)for(i=r,a=0;a<m;++a)s[a]=0;else{for(i=this.lastWeight,a=0;a<m;++a)s[a]=this.lastOutput[a];f=!0}for(;i>0&&h<p;){if(l=1+h-o,!(i>=l)){for(a=0;a<m;++a)s[a]+=t[h+(a>0?a:0)]*i;o+=i,i=0;break}for(a=0;a<m;++a)s[a]+=t[h++]*l;o=h,i-=l}if(0!==i){for(this.lastWeight=i,a=0;a<m;++a)this.lastOutput[a]=s[a];this.tailExists=!0;break}for(a=0;a<m;++a)n[u++]=s[a]/r}while(h<p&&u<e);return this.bufferSlice(u)}}resample(t){return this.fromSampleRate==this.toSampleRate?this.ratioWeight=1:(this.fromSampleRate<this.toSampleRate?this.lastWeight=1:(this.tailExists=!1,this.lastWeight=0),this.initializeBuffers(),this.ratioWeight=this.fromSampleRate/this.toSampleRate),this.resampler(t)}}registerProcessor("recorder.worklet",RecorderProcessor);