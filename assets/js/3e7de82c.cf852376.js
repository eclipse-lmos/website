"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[8496],{156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"arc/dsl/Features/retry","title":"Retry","description":"The retry function re-runs the current Agent. This is useful for when the Agent initially generates a bad response.","source":"@site/docs/arc/01-dsl/Features/retry.md","sourceDirName":"arc/01-dsl/Features","slug":"/arc/dsl/Features/retry","permalink":"/lmos/docs/arc/dsl/Features/retry","draft":false,"unlisted":false,"editUrl":"https://github.com/eclipse-lmos/website/edit/source/docs/arc/01-dsl/Features/retry.md","tags":[],"version":"current","frontMatter":{"title":"Retry"},"sidebar":"arcSidebar","previous":{"title":"Rate Limiter","permalink":"/lmos/docs/arc/dsl/Features/rate_limiter"},"next":{"title":"Defining Functions","permalink":"/lmos/docs/arc/dsl/defining_functions"}}');var s=n(4848),i=n(8453);const a={title:"Retry"},c=void 0,o={},l=[];function d(e){const t={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"retry"})," function re-runs the current Agent. This is useful for when the Agent initially generates a bad response.\nDue to the undeterministic nature of LLMs retrying a request can often yield a better response."]}),"\n",(0,s.jsx)(t.p,{children:'Example "Retry when quality check fails":'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:'agent {\n    name = "weather"\n    filterOutput {\n       if(!qualityCheck()) {\n           retry(max = 3)\n       }\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When the ",(0,s.jsx)(t.code,{children:"retry"})," function is called, the agent will be executed with the same parameters and state as the original run,\nwith the only difference being that an instance of ",(0,s.jsx)(t.code,{children:"RetrySignal"})," will be added to the context."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"RetrySignal"})," bean can be accessed with the ",(0,s.jsx)(t.code,{children:"get"})," function\nand will contain the data provided to the ",(0,s.jsx)(t.code,{children:"retry"})," function."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Warning:"})," The default retry count is 100!"]}),"\n",(0,s.jsx)(t.p,{children:'Example "Pass instructions to the second run":'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:'agent {\n    name = "weather"\n    filterOutput {\n        if(!qualityCheck()) {\n            retry(reason = "feedback to agent", max = 3)\n        }\n    }\n    prompt {\n        val retry = getOptional<RetrySignal>()\n        if (retry != null) {\n            // The details provided to the retry function can be accessed here.\n            """ Updated Instructions with ${retry.reason}"""\n        } else {\n            """ Instructions """\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["In this example, a ",(0,s.jsx)(t.code,{children:"reason"})," is passed to the ",(0,s.jsx)(t.code,{children:"retry"}),".\nThe ",(0,s.jsx)(t.code,{children:"reason"})," can then be used to update the system prompt of the agent to help ensure a better response."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(6540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);