"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[7753],{4868:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"multi_agent_system/group_management","title":"Group Management","description":"Manages agent groups and collaboration.","source":"@site/docs/multi_agent_system/group_management.md","sourceDirName":"multi_agent_system","slug":"/multi_agent_system/group_management","permalink":"/lmos/docs/multi_agent_system/group_management","draft":false,"unlisted":false,"editUrl":"https://github.com/eclipse-lmos/website/edit/source/docs/multi_agent_system/group_management.md","tags":[],"version":"current","frontMatter":{"title":"Group Management","description":"Manages agent groups and collaboration."},"sidebar":"lmosSidebar","previous":{"title":"Agent Communication","permalink":"/lmos/docs/multi_agent_system/agent_communication"},"next":{"title":"Agent Lifecycle Management","permalink":"/lmos/docs/multi_agent_system/agent_lifecycle"}}');var a=t(4848),o=t(8453);const i={title:"Group Management",description:"Manages agent groups and collaboration."},r="Group Management",l={},c=[{value:"Problem statement",id:"problem-statement",level:2}];function u(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"group-management",children:"Group Management"})}),"\n",(0,a.jsx)(n.h2,{id:"problem-statement",children:"Problem statement"}),"\n",(0,a.jsx)(n.p,{children:"The architecture should support the creation, management, and dissolution of agent groups, fostering enhanced collaboration, coordination, and trust among agents within the system. Group management offers several key advantages:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Security & Trust:"})," Group management enforces trust relationships, ensuring that only trustworthy agents can join a group. This is crucial for safeguarding sensitive data and ensuring that only trusted agents are allowed to collaborate within the group."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Tenant Isolation"}),": Groups can be formed for different tenants, ensuring that each tenant has access to a unique set of agents. This isolation allows for customized agent configurations tailored to the specific needs of each tenant."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Channel Isolation"}),": Within a single tenant, multiple groups can be created for various use cases. For instance, a chatbot integrated into a web application might use a different set of agents than a chatbot connected to a hotline. Every channel could be configured as a dedicated group."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Adaptive Routing"}),": The system can implement adaptive routing, allowing agents to dynamically join or leave groups as needed. This ensures that the most capable agents are available for specific tasks or contexts."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Task Distribution"}),": Complex tasks often require collaboration between specialized agents. Group management enables the distribution of tasks across a trusted group of agents."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Channel-Aware Behavior"}),": Agents can adapt their behavior based on the configuration of their current group, enhancing their ability to operate effectively within different contexts."]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);