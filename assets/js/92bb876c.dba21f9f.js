"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[9184],{4167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=t(4848),r=t(8453);const i={title:"Getting Started"},l="Getting Started",o={id:"getting_started",title:"Getting Started",description:"Test LMOS locally",source:"@site/docs/getting_started.md",sourceDirName:".",slug:"/getting_started",permalink:"/lmos/docs/getting_started",draft:!1,unlisted:!1,editUrl:"https://github.com/eclipse-lmos/website/edit/main/docs/getting_started.md",tags:[],version:"current",frontMatter:{title:"Getting Started"},sidebar:"tutorialSidebar",previous:{title:"Agent ReaCtor (ARC)",permalink:"/lmos/docs/architecture/agent_reactor"}},a={},c=[{value:"Test LMOS locally",id:"test-lmos-locally",level:2},{value:"1. Open the Repository in a Dev Container",id:"1-open-the-repository-in-a-dev-container",level:3},{value:"2. Set OpenAI Connection Details",id:"2-set-openai-connection-details",level:3},{value:"3. Check the Setup",id:"3-check-the-setup",level:3},{value:"4. Access Kiali and Grafana",id:"4-access-kiali-and-grafana",level:3},{value:"5. Execute a POST request",id:"5-execute-a-post-request",level:3},{value:"Deploy LMOS on your Kubernetes cluster",id:"deploy-lmos-on-your-kubernetes-cluster",level:2},{value:"1. Install lmos-operator",id:"1-install-lmos-operator",level:3},{value:"2. Create Kubernetes Secret for OpenAI",id:"2-create-kubernetes-secret-for-openai",level:3},{value:"3. Install lmos-runtime",id:"3-install-lmos-runtime",level:3},{value:"4. Verifying Installation",id:"4-verifying-installation",level:3},{value:"Develop your own agent",id:"develop-your-own-agent",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,s.jsx)(n.h2,{id:"test-lmos-locally",children:"Test LMOS locally"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://github.com/eclipse-lmos/lmos-demo",children:"LMOS Demo"})," serves as a starting point for testing LMOS. While we are still in the process of migrating projects to Open Source and adopting Open Standards, the core concepts are already available for testing. ",(0,s.jsx)("br",{}),"\r\nThe LMOS Demo launches a container that internally sets up Kubernetes (Minikube), along with Istio, Kiali, Grafana, and Prometheus, into which the LMOS components are installed."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Prerequisites"}),":"]}),"\n",(0,s.jsx)(n.p,{children:"Before you begin, ensure the following tools are installed and running on your local machine:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.docker.com/get-docker/",children:"Docker"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://code.visualstudio.com/",children:"Visual Studio Code"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers",children:"Remote - Containers extension"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"1-open-the-repository-in-a-dev-container",children:"1. Open the Repository in a Dev Container"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Clone the repository:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/eclipse-lmos/lmos-demo.git\r\ncd lmos-demo\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Open the repository in Visual Studio Code:"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open the Command Palette (F1 or Ctrl+Shift+P on Windows, Shift+Command+P on Mac) and select ",(0,s.jsx)(n.code,{children:"Remote-Containers: Reopen in Container"}),". This will build and open the repository in a Docker-based development container.\r\n(Please note:\r\na. If you are unable to find the option 'Remote-Containers: Reopen in Container' in Command Palette then use 'Dev Containers: Rebuild Container'\r\nb. Default memory allocated is 8 gigs, if you are facing any container boot issue related to memory then you may reduce this allocated memory by updating memory parameter available in 'runArgs' in 'devcontainer.json' file)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-set-openai-connection-details",children:"2. Set OpenAI Connection Details"}),"\n",(0,s.jsxs)(n.p,{children:["Once inside the development container, set up the necessary environment variables for OpenAI API access in the ",(0,s.jsx)(n.code,{children:".env"})," file.\r\nThis OpenAPI access is used by the ",(0,s.jsx)(n.code,{children:"lmos-runtime"})," and the agents."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'OPENAI_APIKEY="<your-openai-api-key>"\r\nOPENAI_MODELNAME="gpt-4o-mini"\r\nOPENAI_URL="https://api.openai.com"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-check-the-setup",children:"3. Check the Setup"}),"\n",(0,s.jsx)(n.p,{children:"To verify the installation of LMOS, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl get pods\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"NAME                               READY   STATUS    RESTARTS   AGE\r\nlmos-operator-c45887647-bcwf8      2/2     Running   0          4m16s\r\nlmos-runtime-85654bc6bc-chvrj      2/2     Running   0          4m15s\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The status has to be ",(0,s.jsx)(n.code,{children:"2/2 Running"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Two agents have been installed, you can list them with"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl get agents\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"NAME                AGE\r\narc-news-agent      2m34s\r\narc-weather-agent   2m35s\n"})}),"\n",(0,s.jsx)(n.p,{children:"One channel has been defined, using the capability of the weather-agent."}),"\n",(0,s.jsx)(n.p,{children:"You can list available channels with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl get channels\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"NAME               RESOLVE_STATUS\r\nacme-web-stable    RESOLVED\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"RESOLVE_STATUS"})," of the channel has to be ",(0,s.jsx)(n.code,{children:"RESOLVED"}),", which means the required capabilities have been resolved.\r\nIf the status is ",(0,s.jsx)(n.code,{children:"UNRESOLVED"}),", you can check the reason with:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl get channel acme-web-stable -o yaml\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'apiVersion: lmos.eclipse/v1\r\nkind: Channel\r\nmetadata:\r\n  name: acme-web-stable\r\n  labels:\r\n    tenant: acme\r\n    channel: web\r\n    version: 1.0.0\r\n    subset: stable\r\nspec:\r\n  requiredCapabilities:\r\n    - name: get-weather-forecast\r\n      version: ">=1.0.4"\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can list the resolved channelroutings with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl get channelroutings\n"})}),"\n",(0,s.jsx)(n.p,{children:"And look at a specific channel routing with:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"kubectl get channelrouting acme-web-stable -o yaml\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-access-kiali-and-grafana",children:"4. Access Kiali and Grafana"}),"\n",(0,s.jsx)(n.p,{children:"To visualize your setup, various ports have been forwarded for LMOS, Kiali, Prometheus, Jaeger, Grafana and ArgoCD. You can access these tools at"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Kiali: ",(0,s.jsx)(n.a,{href:"http://localhost:20001",children:"http://localhost:20001"})]}),"\n",(0,s.jsxs)(n.li,{children:["Grafana: ",(0,s.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n",(0,s.jsxs)(n.li,{children:["Prometheus: ",(0,s.jsx)(n.a,{href:"http://localhost:9090",children:"http://localhost:9090"})]}),"\n",(0,s.jsxs)(n.li,{children:["Jaeger: ",(0,s.jsx)(n.a,{href:"http://localhost:9411",children:"http://localhost:9411"})]}),"\n",(0,s.jsxs)(n.li,{children:["ArgoCD: ",(0,s.jsx)(n.a,{href:"http://localhost:3100",children:"http://localhost:3100"})]}),"\n",(0,s.jsxs)(n.li,{children:["LMOS Runtime: ",(0,s.jsx)(n.a,{href:"http://localhost:8081",children:"http://localhost:8081"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-execute-a-post-request",children:"5. Execute a POST request"}),"\n",(0,s.jsxs)(n.p,{children:["You can use Postman or the ",(0,s.jsx)(n.code,{children:"test_runtime.sh"})," script to send a test request to the LMOS runtime.\r\nThe ",(0,s.jsx)(n.code,{children:"lmos-runtime"})," is uses the ",(0,s.jsx)(n.code,{children:"lmos-router"})," to route the request to the appropriate agent."]}),"\n",(0,s.jsx)(n.p,{children:"To test the weather agent, run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"./test_runtime.sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"Output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{"content":"The weather in London is 21 degrees."}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You will see that the weather-agent has responded."}),"\n",(0,s.jsx)(n.h2,{id:"deploy-lmos-on-your-kubernetes-cluster",children:"Deploy LMOS on your Kubernetes cluster"}),"\n",(0,s.jsxs)(n.p,{children:["This guides provides instructions to install ",(0,s.jsx)(n.code,{children:"lmos-operator"})," and ",(0,s.jsx)(n.code,{children:"lmos-runtime"})," on your Kubernetes cluster."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prerequisites:"})}),"\n",(0,s.jsx)(n.p,{children:"Before proceeding with the installation, ensure you have the following prerequisites:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Kubernetes cluster (v1.19 or newer)."}),"\n",(0,s.jsxs)(n.li,{children:["Helm installed (",(0,s.jsx)(n.code,{children:"v3"})," or newer)."]}),"\n",(0,s.jsx)(n.li,{children:"Access to the OpenAI API."}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"OPENAI_API_KEY"})," and ",(0,s.jsx)(n.code,{children:"OPENAI_API_URL"})," values should be available."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"1-install-lmos-operator",children:"1. Install lmos-operator"}),"\n",(0,s.jsxs)(n.p,{children:["To install ",(0,s.jsx)(n.code,{children:"lmos-operator"})," using Helm, run the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"helm upgrade --install lmos-operator oci://ghcr.io/eclipse-lmos/lmos-operator-chart \\\r\n  --version 0.0.4-SNAPSHOT\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-create-kubernetes-secret-for-openai",children:"2. Create Kubernetes Secret for OpenAI"}),"\n",(0,s.jsx)(n.p,{children:'Next, you need to create a Kubernetes secret that contains your OpenAI API key. Replace "$OPENAI_API_KEY" with your actual OpenAI API key.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic lmos-runtime --from-literal=OPENAI_API_KEY="$OPENAI_API_KEY"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-install-lmos-runtime",children:"3. Install lmos-runtime"}),"\n",(0,s.jsxs)(n.p,{children:["Now, install ",(0,s.jsx)(n.code,{children:"lmos-runtime"})," using Helm. Replace the environment variables with the appropriate values:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['"$OPENAI_API_URL": Your OpenAI API URL (e.g., ',(0,s.jsx)(n.a,{href:"https://api.openai.com",children:"https://api.openai.com"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"GPT4o-mini: The desired OpenAI model (in this case, GPT4o-mini)."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'helm upgrade --install lmos-runtime oci://ghcr.io/eclipse-lmos/lmos-runtime-chart \\\r\n  --version 0.0.8-SNAPSHOT \\\r\n  --set openaiApiUrl="$OPENAI_API_URL" \\\r\n  --set openaiApiModel=GPT4o-mini \\\r\n  --set agentRegistryUrl=http://lmos-operator.default.svc.cluster.local:8080\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-verifying-installation",children:"4. Verifying Installation"}),"\n",(0,s.jsx)(n.p,{children:"To ensure both components are installed and running correctly, use the following commands to check the status of the pods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get pods\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see both lmos-operator and lmos-runtime pods in a running state."}),"\n",(0,s.jsx)(n.h2,{id:"develop-your-own-agent",children:"Develop your own agent"}),"\n",(0,s.jsxs)(n.p,{children:["With ARC, we offer a Kotlin-based framework for developing agents.\r\nARC comes with its own dedicated ",(0,s.jsx)(n.a,{href:"https://eclipse-lmos.github.io/arc/docs/index",children:"documentation"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);