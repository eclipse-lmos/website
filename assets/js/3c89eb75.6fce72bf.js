"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[4149],{2259:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"arc/dsl/Features/agent_collaboration","title":"Agent Collaboration","description":"COMING SOON in version 0.122.0","source":"@site/docs/arc/01-dsl/Features/agent_collaboration.md","sourceDirName":"arc/01-dsl/Features","slug":"/arc/dsl/Features/agent_collaboration","permalink":"/lmos/docs/arc/dsl/Features/agent_collaboration","draft":false,"unlisted":false,"editUrl":"https://github.com/eclipse-lmos/website/edit/source/docs/arc/01-dsl/Features/agent_collaboration.md","tags":[],"version":"current","frontMatter":{"title":"Agent Collaboration"},"sidebar":"arcSidebar","previous":{"title":"Accessing Beans","permalink":"/lmos/docs/arc/dsl/Features/accessing_beans"},"next":{"title":"Handling Data","permalink":"/lmos/docs/arc/dsl/Features/data"}}');var o=t(4848),r=t(8453);const s={title:"Agent Collaboration"},i="Agent Collaboration",l={},c=[{value:"Calling another Agent",id:"calling-another-agent",level:2},{value:"Handing over to another Agent",id:"handing-over-to-another-agent",level:2},{value:"Implementing complex Agent workflows",id:"implementing-complex-agent-workflows",level:2},{value:"Calling Remote Agents",id:"calling-remote-agents",level:2}];function g(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"agent-collaboration",children:"Agent Collaboration"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"COMING SOON"})," in version 0.122.0"]}),"\n",(0,o.jsx)(n.p,{children:"This page describes ways in which multiple agents can communicate and collaborate with each other."}),"\n",(0,o.jsxs)(n.p,{children:["For a more elaborate Multi Agent setup with Agent Discovery and Routing,\nplease check out our parent Project ",(0,o.jsx)(n.a,{href:"https://eclipse.dev/lmos/",children:"LMOS"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"calling-another-agent",children:"Calling another Agent"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"callAgent"})," or ",(0,o.jsx)(n.code,{children:"askAgent"})," functions allow you to call another agent from anywhere within the Agent DSL.\nThis is useful for creating Supervisor Agents or simply delegating specific tasks to specialized agents."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'// Using callAgent when you need the full conversation context\nval result: Conversation = callAgent("assistant-agent", input = "a question".toConversation()).getOrNull()\n\n// Using askAgent when you only need the text response\nval result: String = askAgent("assistant-agent", input = "a question").getOrNull()\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Note: An Agent is not allowed to call itself. This will result in an exception."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A common use case is to place the ",(0,o.jsx)(n.code,{children:"callAgent"})," function in an LLM Function\nand let the Agent decide itself when to call the other agent. This creates a more dynamic and flexible system\nwhere agents can autonomously determine when they need assistance from other specialized agents."]}),"\n",(0,o.jsx)(n.p,{children:"Example of a supervisor agent that can call other agents:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kts",children:'   agent {\n    name = "supervisor-agent"\n    tools { +"call_agent" }   \n    prompt {\n        """\n        You are a supervisor agent. \n        You can call other agents to get their help.\n        Call the "weather-agent" if you need weather information.\n        Call the "booking-agent" if you need to book a hotel.\n        """\n    }\n}\n\n// Define a function that the agent can use to call other agents\nfunction(\n    name = "call_agent",\n    description = "Calls an Agent.",\n    params = types(string("name", "the name of the agent to call."))\n) { (name) ->\n    val currentConversation = get<Conversation>()\n    val result = callAgent(name.toString(), input = currentConversation).getOrNull()\n    // Extract just the content from the assistant\'s message or return an error message\n    result?.latest<AssistantMessage>()?.content ?: "Failed to call agent $name!"\n}\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"handing-over-to-another-agent",children:"Handing over to another Agent"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"nextAgent"})," function allows you to hand over the conversation to another agent.\nThat agent will receive the output of the current agent as input, creating a chain of agent interactions."]}),"\n",(0,o.jsx)(n.p,{children:"If the current agent fails or throws an exception, then the next agent will not be called, breaking the chain."}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"nextAgent"})," function can be used in two ways:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"As a top-level function"})," - Always hands over to the specified agent after the current agent completes"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["In the ",(0,o.jsx)(n.code,{children:"filterOutput"})," block"]})," - Conditionally hands over based on specific criteria"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kts",children:'agent {\n    name = "booking-agent"\n    nextAgent("weather-agent")\n    filterOutput {\n        // Conditional handover based on some condition\n        if (someCondition) {\n            nextAgent("weather-agent") \n        }\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Note: There is a limit of 20 Agent Hand-Overs in a chain. This is to prevent infinite loops that could occur if agents keep handing over to each other indefinitely."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"implementing-complex-agent-workflows",children:"Implementing complex Agent workflows"}),"\n",(0,o.jsx)(n.p,{children:"More complex agent workflows can be implemented in standard Kotlin or Java code,\ngiving you full control over the orchestration logic and error handling."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kts",children:'@Component\nclass HolidayPlanner(private val agentProvider: AgentProvider) {\n\n    suspend fun findAGoodDate() {\n        // Get references to the required agents\n        val weatherAgent = agentProvider.getAgentByName("weather-agent") as ChatAgent\n        val bookingAgent = agentProvider.getAgentByName("booking-agent") as ChatAgent\n        val calendarAgent = agentProvider.getAgentByName("calendar-agent") as ChatAgent\n\n        // Initialize variables to track our search\n        var weather = ""\n        var available = ""\n        var date = "today"\n\n        // Keep searching until we find a date with good weather where the user is available\n        while (weather != "good" && available != "yes") {\n            // Ask the booking agent to find an available hotel date\n            date =\n                bookingAgent.ask("Find a hotel in Berlin for 2 nights. Return the first available date after $date.")\n                    .getOrThrow()\n\n            // Check the weather for that date\n            weather = weatherAgent.ask("What is the weather like in Berlin on $date? Return good or bad.").getOrThrow()\n\n            // Check if the user is available on that date\n            available = calendarAgent.ask("Check if i am available on the $date? Return yes or no.").getOrThrow()\n        }\n\n        println("Hotel can be booked on the $date")\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"calling-remote-agents",children:"Calling Remote Agents"}),"\n",(0,o.jsxs)(n.p,{children:["Agents running in the same JVM can call each other with no extra configuration.\nHowever, if you want to call agents running on other servers, or written in other languages or frameworks,\nthen a custom ",(0,o.jsx)(n.code,{children:"AgentLoader"})," is required."]}),"\n",(0,o.jsxs)(n.p,{children:["Simply add one or more ",(0,o.jsx)(n.code,{children:"AgentLoader"})," implementations for each remote agent you want to call."]}),"\n",(0,o.jsxs)(n.p,{children:["Here's an example of a custom ",(0,o.jsx)(n.code,{children:"AgentLoader"})," that integrates with a remote agent:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kts",children:'@Component\nclass RemoteAgentLoader : AgentLoader {\n\n    override fun getAgents(): List<Agent<*, *>> {\n        return listOf(\n            object : ChatAgent {\n                override val name = "remote-agent"\n                override val description = "Remote agent that runs on a different server"\n\n                override suspend fun execute(input: Conversation, context: Set<Any>): Result<Conversation, AgentFailedException> {\n                    TODO("Call the remote agent here")\n                }\n            }\n        )\n    }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Once registered, remote agents can be called using the same ",(0,o.jsx)(n.code,{children:"callAgent"})," or ",(0,o.jsx)(n.code,{children:"askAgent"})," functions as local agents,\nproviding a seamless experience regardless of where the agent is actually running."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(6540);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);