"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[5269],{6058:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"getting_started/kotlin_sdk","title":"LMOS Kotlin SDK","description":"How to use the LMOS Kotlin SDK","source":"@site/docs/getting_started/kotlin_sdk.md","sourceDirName":"getting_started","slug":"/getting_started/kotlin_sdk","permalink":"/lmos/docs/getting_started/kotlin_sdk","draft":false,"unlisted":false,"editUrl":"https://github.com/eclipse-lmos/website/edit/source/docs/getting_started/kotlin_sdk.md","tags":[],"version":"current","frontMatter":{"title":"LMOS Kotlin SDK","description":"How to use the LMOS Kotlin SDK"},"sidebar":"lmosSidebar","previous":{"title":"Demo guide","permalink":"/lmos/docs/getting_started/"},"next":{"title":"Multi-Agent System","permalink":"/lmos/docs/category/multi-agent-system"}}');var o=t(4848),s=t(8453);const a={title:"LMOS Kotlin SDK",description:"How to use the LMOS Kotlin SDK"},r=void 0,l={},c=[{value:"Quick Start Guide",id:"quick-start-guide",level:2},{value:"Adding the Kotlin Server SDK",id:"adding-the-kotlin-server-sdk",level:3},{value:"Using Gradle",id:"using-gradle",level:4},{value:"Using Maven",id:"using-maven",level:4},{value:"Create an AgentApplication",id:"create-an-agentapplication",level:3},{value:"Create an Agent",id:"create-an-agent",level:3},{value:"Implementing the ConversationalAgent Interface",id:"implementing-the-conversationalagent-interface",level:3},{value:"Create a AgentConfiguration",id:"create-a-agentconfiguration",level:3},{value:"Create an application.yaml",id:"create-an-applicationyaml",level:3},{value:"Query the Agent Description",id:"query-the-agent-description",level:3},{value:"Adding the Kotlin Client SDK",id:"adding-the-kotlin-client-sdk",level:3},{value:"Using Gradle",id:"using-gradle-1",level:4},{value:"Using Maven",id:"using-maven-1",level:4},{value:"Communicating with an Agent",id:"communicating-with-an-agent",level:3},{value:"Use the Arc view",id:"use-the-arc-view",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"quick-start-guide",children:"Quick Start Guide"}),"\n",(0,o.jsx)(n.p,{children:"This guide will help you quickly get started with the LMOS Kotlin Client & Server SDK.\nIt walks you through developing an Agent."}),"\n",(0,o.jsxs)(n.p,{children:["The LMOS Kotlin Server SDK allows you to create Agents based on ",(0,o.jsx)(n.a,{href:"https://spring.io/projects/spring-boot",children:"Spring Boot"})," and ",(0,o.jsx)(n.a,{href:"https://ktor.io/",children:"Ktor"}),". The following diagram illustrates the technology stack of the LMOS Kotlin SDK."]}),"\n",(0,o.jsx)(n.p,{children:"The LMOS Kotlin Server SDK enables the implementation of Agents by leveraging the LMOS protocol. It leverages Eclipse ThingWeb (kotlin-wot) to ensure semantic WoT compatibility and supports HTTP, WebSocket and MQTT protocol bindings for flexible communication. The Agent runs within a Spring Boot application, which internally uses Ktor to handle the underlying protocol bindings. For observability, the SDK integrates OpenTelemetry, providing comprehensive support for logs, metrics, and traces."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.img,{alt:"Technology Stack",src:t(2857).A+"#light-mode-only",width:"1040",height:"647"}),"\n",(0,o.jsx)(n.img,{alt:"Technology Stack",src:t(1817).A+"#dark-mode-only",width:"1040",height:"647"})]}),"\n",(0,o.jsx)(n.h3,{id:"adding-the-kotlin-server-sdk",children:"Adding the Kotlin Server SDK"}),"\n",(0,o.jsx)(n.p,{children:"To use the LMOS Kotlin Server SDK in your project, you need to add the following dependency to your build configuration:"}),"\n",(0,o.jsx)(n.h4,{id:"using-gradle",children:"Using Gradle"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'dependencies {\n    implementation("org.eclipse.lmos:lmos-kotlin-sdk-server:0.1.0-SNAPSHOT")\n    implementation("org.eclipse.thingweb:kotlin-wot-binding-http:0.1.0-SNAPSHOT")\n    // If you want to support websocket\n    //implementation("org.eclipse.thingweb:kotlin-wot-binding-websocket:0.1.0-SNAPSHOT"  \n}\n\nrepositories {\n    maven {\n        url \'https://oss.sonatype.org/content/repositories/snapshots/\'\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"using-maven",children:"Using Maven"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    <dependency>\n        <groupId>org.eclipse.lmos</groupId>\n        <artifactId>lmos-kotlin-sdk-server</artifactId>\n        <version>0.1.0-SNAPSHOT</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.lmos</groupId>\n        <artifactId>kotlin-wot-binding-http</artifactId>\n        <version>0.1.0-SNAPSHOT</version>\n    </dependency>\n    \x3c!--\n    <dependency>\n        <groupId>org.eclipse.lmos</groupId>\n        <artifactId>kotlin-wot-binding-websocket</artifactId>\n        <version>0.1.0-SNAPSHOT</version>\n    </dependency>  \n    --\x3e     \n</dependencies>\n\n<repositories>\n    <repository>\n        <id>sonatype-snapshots</id>\n        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"create-an-agentapplication",children:"Create an AgentApplication"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"AgentApplication"})," is the entry point of the Spring Boot application."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:"fun main(args: Array<String>) {\n    runApplication<TestApplication>(*args)\n}\n\n@SpringBootApplication\nclass TestApplication {}\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"create-an-agent",children:"Create an Agent"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ChatAgent"})," is a specific implementation of an agent that handles conversational interactions."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'@Thing(id="chatagent", title="Chat Agent", description="A chat agent.", type= LMOSThingTypes.AGENT)\n@Context(prefix = LMOSContext.prefix, url = LMOSContext.url)\n@Component\nclass ChatAgent(private val arcAgent: ConversationalAgent) {\n\n    @Action(title = "Chat", description = "Ask the agent a question.")\n    @ActionInput(title = "A question", description = "A question of a user")\n    @ActionOutput(title = "An answer", description = "An Answer of the agent")\n    suspend fun chat(message: AgentRequest) : AgentResult {\n        return arcAgent.chat(message)\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"implementing-the-conversationalagent-interface",children:"Implementing the ConversationalAgent Interface"}),"\n",(0,o.jsxs)(n.p,{children:["When creating a conversational agent, the ",(0,o.jsx)(n.code,{children:"ConversationalAgent"})," interface must be implemented. This ensures that the agent adheres to a standard structure for handling conversational interactions, making it compatible with the LMOS ecosystem."]}),"\n",(0,o.jsxs)(n.p,{children:["When implementing an agent, the ",(0,o.jsx)(n.a,{href:"https://eclipse.dev/lmos/arc2/index.html",children:"LMOS ARC"})," framework is commonly used due to its seamless integration with the LMOS ecosystem. ARC Agents can either be injected or retrieved from the AgentProvider."]}),"\n",(0,o.jsx)(n.p,{children:"However, other frameworks like Langchain4j can also be utilized, offering flexibility depending on your project requirements and preferences."}),"\n",(0,o.jsxs)(n.p,{children:["Below is an example of how to implement the ",(0,o.jsx)(n.code,{children:"ConversationalAgent"})," interface with ARC:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'@Component\nclass ArcConversationalAgent(agentProvider: AgentProvider) : ConversationalAgent {\n    private val agent = agentProvider.getAgentByName("ChatAgent") as ChatAgent\n\n    override suspend fun chat(message: AgentRequest): AgentResult {\n        return executeAgent(message, agent::execute)\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"create-a-agentconfiguration",children:"Create a AgentConfiguration"}),"\n",(0,o.jsx)(n.p,{children:"The configuration for the ARC agent is typically handled by Spring Boot's dependency injection and configuration mechanisms. This ensures that the agent is properly initialized and ready to handle requests. The ARC DSL (Domain-Specific Language) is used to define the behavior and functionality of the Agent in a concise and elegant manner. By leveraging the ARC DSL, developers can specify the Agent's name, prompt, tools, and other configurations in a structured and readable format."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'@Configuration\nclass AgentConfiguration {\n\n    @Bean\n    fun chatArcAgent(agent: Agents) = agent {\n        name = "ChatAgent"\n        prompt {\n            """\n            You are a professional assistant. \n            """\n        }\n        model = { "GPT-4o" }\n        tools = AllTools\n    }\n\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"create-an-applicationyaml",children:"Create an application.yaml"}),"\n",(0,o.jsx)(n.p,{children:"To configure your agent, you need to create an application.yaml file and place it in the resources folder of your project. This file is essential for defining the configuration settings for your agent, such as its name, AI client details, and protocol support."}),"\n",(0,o.jsx)(n.p,{children:"In the application.yaml file, you can enable both HTTP and WebSocket protocols simultaneously by setting their enabled properties to true. This allows your agent to handle requests over both protocols in parallel."}),"\n",(0,o.jsx)(n.p,{children:"Here\u2019s an example configuration:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"spring:\n  application:\n    name: chat-agent\n\narc:\n  ai:\n    clients:\n      - id: GPT-4o   // The id must match the model in the AgentConfiguration\n        model-name: <model>\n        api-key: <key>\n        client: openai\n        url: <url>\n\nwot:\n  servient:\n    websocket:\n      server:\n        enabled: true\n        host: localhost\n        port: 8181\n    http:\n      server:\n        enabled: true\n        host: localhost\n        port: 9080\n"})}),"\n",(0,o.jsx)(n.h3,{id:"query-the-agent-description",children:"Query the Agent Description"}),"\n",(0,o.jsxs)(n.p,{children:["The endpoint ",(0,o.jsx)(n.code,{children:"http://localhost:9080/chatagent"})," is the URL where the Agent Description is hosted. This endpoint serves as the interface for clients to communicate with the Agent. It acts as the central access point for integrating the Agent into your application or system."]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "id": "chatagent",\n    "title": "Chat Agent",\n    "@context": [\n        "https://www.w3.org/2022/wot/td/v1.1",\n        {\n            "lmos": "https://eclipse.dev/lmos/protocol/v1"\n        }\n    ],\n    "@type": "lmos:Agent",\n    "version": {\n        "instance": "1.0.0"\n    },\n    "description": "A chat agent.",\n    "actions": {\n        "chat": {\n            "description": "Ask the agent a question.",\n            "forms": [\n                {\n                    "href": "http://localhost:9080/chatagent/actions/chat",\n                    "contentType": "application/json",\n                    "op": [\n                        "invokeaction"\n                    ]\n                }\n            ],\n            "input": {\n                "type": "object",\n                "properties": {\n                    ...\n                },\n                "required": [\n                    "messages"\n                ],\n                "title": "The question",\n                "description": "A question"\n            },\n            "output": {\n                "type": "object",\n                "title": "The answer",\n                "description": "The Answer",\n                "properties": {\n                   ...\n                },\n                "required": [\n                    "messages"\n                ]\n            },\n            "synchronous": true\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"adding-the-kotlin-client-sdk",children:"Adding the Kotlin Client SDK"}),"\n",(0,o.jsx)(n.p,{children:"To use the LMOS Kotlin Client SDK in your project, you need to add the following dependency to your build configuration:"}),"\n",(0,o.jsx)(n.h4,{id:"using-gradle-1",children:"Using Gradle"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'dependencies {\n    implementation("org.eclipse.lmos:lmos-kotlin-sdk-client:0.1.0-SNAPSHOT")\n    implementation("org.eclipse.thingweb:kotlin-wot-binding-http:0.1.0-SNAPSHOT")\n    // If you want to support websocket\n    //implementation("org.eclipse.thingweb:kotlin-wot-binding-websocket:0.1.0-SNAPSHOT" \n}\n\nrepositories {\n    maven {\n        url \'https://oss.sonatype.org/content/repositories/snapshots/\'\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h4,{id:"using-maven-1",children:"Using Maven"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    <dependency>\n        <groupId>org.eclipse.lmos</groupId>\n        <artifactId>lmos-kotlin-sdk-client</artifactId>\n        <version>0.1.0-SNAPSHOT</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.lmos</groupId>\n        <artifactId>kotlin-wot-binding-http</artifactId>\n        <version>0.1.0-SNAPSHOT</version>\n    </dependency>\n    \x3c!--\n    <dependency>\n        <groupId>org.eclipse.lmos</groupId>\n        <artifactId>kotlin-wot-binding-websocket</artifactId>\n        <version>0.1.0-SNAPSHOT</version>\n    </dependency>\n    --\x3e\n</dependencies>\n\n<repositories>\n    <repository>\n        <id>sonatype-snapshots</id>\n        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"communicating-with-an-agent",children:"Communicating with an Agent"}),"\n",(0,o.jsxs)(n.p,{children:["The LMOS Kotlin Client SDK enables communication with an LMOS agent. The ",(0,o.jsx)(n.code,{children:"WotConversationalAgent"})," only requires the Agent Description (TD) endpoint to create a proxy that can be used to invoke actions or subscribe to events."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-kotlin",children:'val agent = WotConversationalAgent\n    .create("http://localhost:9080/weather-agent")\n\n\n// Interacting with the agent via chat\nval answer = agent.chat("What is the weather in London?")\n\n// Consuming an event from the agent, \n// but the ChatAgent does not provide any events in this example\nagent.consumeEvent("agentEvent") {\n    println("Event: $it")\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"use-the-arc-view",children:"Use the Arc view"}),"\n",(0,o.jsxs)(n.p,{children:["LMOS Arc View provides a graphical user interface that allows you to interact with the Arc Agent and get more insights.\nFor more details see ",(0,o.jsx)(n.a,{href:"https://eclipse.dev/lmos/docs/arc/view/",children:"Arc View"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1817:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/technology_stack-dark-55641fa854963af2884200918b001cfa.png"},2857:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/technology_stack-light-ee9064303883a1a9b057475bb894658d.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(6540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);