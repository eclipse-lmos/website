"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[311],{7269:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(4848),i=t(8453);const s={title:"Agent Communication"},r="Agent Communication",a={id:"multi_agent_system/agent_communication",title:"Agent Communication",description:"Problem statement",source:"@site/docs/multi_agent_system/agent_communication.md",sourceDirName:"multi_agent_system",slug:"/multi_agent_system/agent_communication",permalink:"/lmos/docs/multi_agent_system/agent_communication",draft:!1,unlisted:!1,editUrl:"https://github.com/eclipse-lmos/website/edit/main/docs/multi_agent_system/agent_communication.md",tags:[],version:"current",frontMatter:{title:"Agent Communication"},sidebar:"tutorialSidebar",previous:{title:"Agent Registry",permalink:"/lmos/docs/multi_agent_system/agent_registry"},next:{title:"Group Management",permalink:"/lmos/docs/multi_agent_system/group_management"}},c={},l=[{value:"Problem statement",id:"problem-statement",level:2},{value:"Web of Things",id:"web-of-things",level:2},{value:"Protocol Bindings in WoT",id:"protocol-bindings-in-wot",level:3},{value:"Implementation of Protocol Bindings",id:"implementation-of-protocol-bindings",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"agent-communication",children:"Agent Communication"})}),"\n",(0,o.jsx)(n.h2,{id:"problem-statement",children:"Problem statement"}),"\n",(0,o.jsx)(n.p,{children:"Agents should be able to communicate using open protocols, but the architecture must provide flexibility in choosing the best protocol for each agent\u2019s purpose. Rather than enforcing a single transport protocol like HTTP, MQTT, or AMQP, the system should allow agents to select and adapt protocols based on their needs."}),"\n",(0,o.jsx)(n.p,{children:"A higher abstraction layer on top of the actual transport protocols can significantly enhance the flexibility and efficiency of multi-agent systems:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Interoperability:"})," Agents using different transport protocols can still communicate seamlessly through the abstraction layer, which handles the translation between protocols."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplified Development:"})," Developers can focus on agent logic and behavior rather than the intricacies of various transport protocols. This abstraction reduces the complexity of agent implementation."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Future-proofing:"})," As new transport protocols emerge or existing ones evolve, the abstraction layer can be updated to support them without requiring changes to the agents themselves."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"web-of-things",children:"Web of Things"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.w3.org/WoT/",children:"W3C Web of Things (WoT)"})," abstracts transport protocols through the use of protocol bindings."]}),"\n",(0,o.jsx)(n.h3,{id:"protocol-bindings-in-wot",children:"Protocol Bindings in WoT"}),"\n",(0,o.jsx)(n.p,{children:"Protocol bindings provide a way to map the abstract interactions defined in a Thing Description (TD) to concrete protocols. This abstraction allows WoT to support a wide range of existing and future IoT protocols without changing the core architecture."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Key Aspects:"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Abstract Interaction Model:"}),"\nWoT defines an abstract interaction model based on Properties, Actions, and Events. This model is protocol-agnostic and can be mapped to various concrete protocols."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Protocol-specific Vocabularies:"}),"\nEach supported protocol has a specific vocabulary that defines how the abstract interactions are realized using that protocol."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Flexibility:"}),"\nProtocol bindings allow Things to use multiple protocols simultaneously, enabling broader interoperability."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"implementation-of-protocol-bindings",children:"Implementation of Protocol Bindings"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"TD Protocol Field:"}),'\nThe Thing Description includes a "forms" field for each interaction affordance (Property, Action, or Event). This field specifies the protocol binding details:']}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'The protocol scheme (e.g., "http", "coap", "mqtt")'}),"\n",(0,o.jsx)(n.li,{children:"Protocol-specific options"}),"\n",(0,o.jsx)(n.li,{children:"The concrete endpoint URL"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Example:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "@context": [\n        "https://www.w3.org/2022/wot/td/v1.1",\n        {\n            "htv": "http://www.w3.org/2011/http#"\n        },\n        "https://schema.org/"\n    ],\n    "id": "urn:uuid:6f1d3a7a-1f97-4e6b-b45f-f3c2e1c84c77",\n    "title": "WeatherAgent",\n    "actions": {\n        "getWeather": {\n            "description": "Fetches weather information based on user input.",\n            "safe": true, //  Used to signal that there is no internal state changed when invoking the action. \n            "idempotent": false, // Informs whether the Action can be called repeatedly with the same result.\n            "synchronous": true,\n            "input": {\n               "type": "object",\n                "properties": {\n                    "question": {\n                        "type": "string"\n                    },\n                    "interactionMode": {\n                        "type": "string",\n                        "enum": ["text", "voice"]\n                    }\n                },\n                "required": ["question","interactionMode"]\n            },\n            "output": {\n                "type": "string",\n                "description": "Natural language output providing weather information."\n            },            \n            "forms": [\n                {\n                    "op": "invokeaction",\n                    "href": "https://weatherai.example.com/weather",\n                    "contentType": "application/json",\n                    "htv:methodName":"POST"\n                }\n            ]\n        }\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);