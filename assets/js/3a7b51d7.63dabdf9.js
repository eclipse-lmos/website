"use strict";(self.webpackChunklmos_website=self.webpackChunklmos_website||[]).push([[7421],{4865:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"arc/ccore/memory/index","title":"Memory","description":"Using memory is a powerful way to store and retrieve values in the Arc Agent Framework.","source":"@site/docs/arc/02-ccore/07-memory/index.md","sourceDirName":"arc/02-ccore/07-memory","slug":"/arc/ccore/memory/","permalink":"/lmos/docs/arc/ccore/memory/","draft":false,"unlisted":false,"editUrl":"https://github.com/eclipse-lmos/website/edit/source/docs/arc/02-ccore/07-memory/index.md","tags":[],"version":"current","frontMatter":{"title":"Memory"},"sidebar":"arcSidebar","previous":{"title":"Eventing","permalink":"/lmos/docs/arc/ccore/eventing/"},"next":{"title":"Arc API","permalink":"/lmos/docs/arc/ccore/api"}}');var t=n(4848),s=n(8453);const i={title:"Memory"},a=void 0,d={},m=[{value:"In-Memory Memory",id:"in-memory-memory",level:2},{value:"Mongo Memory",id:"mongo-memory",level:2},{value:"Redis Memory",id:"redis-memory",level:2}];function l(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Using memory is a powerful way to store and retrieve values in the Arc Agent Framework."}),"\n",(0,t.jsxs)(r.p,{children:["The easiest way to use memory in Arc is to use the ",(0,t.jsx)(r.code,{children:"memory"})," function."]}),"\n",(0,t.jsx)(r.p,{children:"The memory function can be accessed anywhere in the Arc DSL."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'  // Store a value in memory\n  memory("user_name", "Bob")\n\n  // Storing a value in long-term memory\n  memory("user_name", "Bob", scope = LONG_TERM)\n\n  // Retrieve a value from memory\n  val userName = memory<String>("user_name")\n\n'})}),"\n",(0,t.jsx)(r.p,{children:"Memory keys are automatically namespaced by the conversation id and/or user id."}),"\n",(0,t.jsx)(r.p,{children:"Data can be stored in two different scopes:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"LONG_TERM"}),": Data stored in long term memory is stored indefinitely. It requires a user id."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"SHORT_TERM"}),": This data is stored in the current conversation / session."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"The Arc Agent Framework declares the following interface for memory:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"interface Memory {\n\n    /**\n     * Store a value in LONG_TERM memory.\n     * @param owner The owner of the memory. For example, the user id.\n     * @param key The key to store the value under.\n     * @param value The value to store. If null, the value is removed from memory.\n     */\n    suspend fun storeLongTerm(owner: String, key: String, value: Any?)\n\n    /**\n     * Store a value in SHORT_TERM memory.\n     * @param owner The owner of the memory. For example, the user id.\n     * @param key The key to store the value under.\n     * @param value The value to store. If null, the value is removed from memory.\n     * @param sessionId The session id to store the value under.\n     */\n    suspend fun storeShortTerm(owner: String, key: String, value: Any?, sessionId: String)\n\n    /**\n     * Fetch a value from memory.\n     * @param owner The owner of the memory. For example, the user id.\n     * @param key The key to fetch the value for.\n     * @param sessionId The session id to fetch the value for. Only used if the value was stored under SHORT_TERM memory.\n     * @return The value stored under the key, or null if no value is stored.\n     */\n    suspend fun fetch(owner: String, key: String, sessionId: String? = null): Any?\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Each application wanting to use memory can provide an implementation of the ",(0,t.jsx)(r.code,{children:"Memory"})," interface."]}),"\n",(0,t.jsx)(r.p,{children:"Arc provides the following implementations:"}),"\n",(0,t.jsx)(r.h2,{id:"in-memory-memory",children:"In-Memory Memory"}),"\n",(0,t.jsxs)(r.p,{children:["The Arc Agent Framework provides a default in-memory implementation of the ",(0,t.jsx)(r.code,{children:"Memory"})," interface.\nThe implementation is automatically configured when no other implementation of the ",(0,t.jsx)(r.code,{children:"Memory"})," interface is provided."]}),"\n",(0,t.jsx)(r.p,{children:"This implementation is good for getting started, but it is not recommended for production use,\nas memory is not persisted or shared between instances."}),"\n",(0,t.jsx)(r.h2,{id:"mongo-memory",children:"Mongo Memory"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Package Name"}),(0,t.jsx)(r.th,{children:"Type"})]})}),(0,t.jsx)(r.tbody,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"io.github.eclipse-lmos.arc:arc-memory-mongo-spring-boot-starter:$arcVersion"}),(0,t.jsx)(r.td,{children:"Spring Boot Starter"})]})})]}),"\n",(0,t.jsxs)(r.p,{children:["The Mongo Memory implementation uses the ",(0,t.jsx)(r.a,{href:"https://www.mongodb.com/",children:"Mongo Database"})," to store data."]}),"\n",(0,t.jsx)(r.p,{children:"The module is provided as a Spring Boot Starter and under the hood uses Spring Data to access\nthe Mongo Database."}),"\n",(0,t.jsxs)(r.p,{children:["A time-to-live (TTL) index is created for ",(0,t.jsx)(r.code,{children:"short-term"})," memory entries to automatically remove\nthem after a period of time."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Configuration"}),(0,t.jsx)(r.th,{children:"Description"}),(0,t.jsx)(r.th,{children:"Type"}),(0,t.jsx)(r.th,{children:"Default"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"arc.memory.short-term-ttl"}),(0,t.jsx)(r.td,{children:"The time-to-live for short-term memory entries."}),(0,t.jsx)(r.td,{children:"Duration"}),(0,t.jsx)(r.td,{children:"PT3H (3 hours)"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"spring.data.mongodb.uri"}),(0,t.jsxs)(r.td,{children:['The uri of the Mongo Database. Example, "mongodb://admin',":password",'@localhost:27017/memory"']}),(0,t.jsx)(r.td,{children:"URI"}),(0,t.jsx)(r.td,{children:"localhost"})]})]})]}),"\n",(0,t.jsxs)(r.p,{children:["For more details on how to configure a Mongo Database with Spring, please refer to\n",(0,t.jsx)(r.a,{href:"https://docs.spring.io/spring-data/mongodb/reference/mongodb.html",children:"https://docs.spring.io/spring-data/mongodb/reference/mongodb.html"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"redis-memory",children:"Redis Memory"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"arc-memory-redis"})," module provides a Redis implementation of the Memory interface based on the Lettuce Redis client.\nThe Redis Memory can be easier setup by providing a configured RedisClient."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'    @Bean\n    fun memory(\n        @Value("\\${redis.username:}") username: String,\n        @Value("\\${redis.password:}") password: String,\n        @Value("\\${redis.url:}") redisUrl: String,\n    ): Memory {\n        val url = RedisURI.Builder.redis(redisUrl).withAuthentication(username, password).build()\n        val client = RedisClusterClient.create(url)\n        return RedisMemory(ofHours(3), client)\n    }\n'})})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var o=n(6540);const t={},s=o.createContext(t);function i(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);